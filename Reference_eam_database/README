------------------------------------------------------------------------------
EAM database tool (original version)
Xiaowang Zhou (Sandia), xzhou at sandia.gov

based on this paper:

X. W. Zhou, R. A. Johnson, and H. N. G. Wadley, Phys. Rev. B, 69,
144113 (2004).

This tool can be used to create an DYNAMO-formatted EAM
setfl file for alloy systems, using any combination 
of the elements discussed in the paper and listed in
the EAM_code file, namely:

Cu, Ag, Au, Ni, Pd, Pt, Al, Pb, Fe, Mo, Ta, W, Mg, Co, Ti, Zr

Steps:

1) compile create.f -> a.out  (e.g. gfortran create.f)
2) edit the input file EAM.input to list 2 or more desired elements to include
3) a.out < EAM.input will create an EAM *.set file
4) in DYNAMO or LAMMPS lingo, this is a setfl file
   that can be used with the LAMMPS pair_style eam/alloy command
------------------------------------------------------------------------------
Zhou04_create_v2.f
==================

The FORTRAN script Zhou04_create_v2.f is an updated version of the create.f
script by X.W. Zhou (Sandia National Laboratories) for generating EAM/alloy
setfl interatomic potential files described in X.W. Zhou, R.A. Johnson, and
H.N.G. Wadley, Phys. Rev. B, 69, 144113 (2004).  This version was updated by
L.M. Hale (National Institute of Standards and Technology) with X.W. Zhou's
advice to fix spurious fluctuations in the original potential files caused by
conversions between single and double precision floating point numbers.

Instructions
------------

Compile (on Ubuntu) the code with

    sudo apt -y install gfortran
    gfortran -o Zhou04_EAM_2 Zhou04_create_v2.f -std=legacy
    
The generated executable needs two input files: EAM_code and EAM.input.
EAM_code contains the parameters used to generate the tabulated potentials for
all of the elements.  EAM.input specifies which elements are to be included
in the resulting potential file.  EAM_code and examples of EAM.input for 
different alloys (EAM.input.Cu for Cu, EAM.input.CuTa for Cu-Ta, etc.) can be
downloaded from the NIST Interatomic Potential Repository
https://www.ctcms.nist.gov/potentials/.

Assuming that EAM_code and the EAM.input file you want to use are in the same
directory as the executable, potential files can be generated with
    
    ./Zhou04_EAM_2  < EAM.input
    
or on Windows
    
    ./Zhou04_EAM_2.exe < EAM.input
    
This will generate a potential file named *_Zhou04.eam.alloy, where * is a
list of the included elements.
------------------------------------------------------------------------------
EAM database tool (+python version)

Fortran version (create.f) by Xiaowang Zhou (Sandia), xzhou at sandia.gov
with revisions by Lucas Hale lucas.hale at nist.gov from https://www.ctcms.nist.gov/potentials/entry/2004--Zhou-X-W-Johnson-R-A-Wadley-H-N-G--Al/
Note: 18 elements (GPUMD): https://github.com/brucefan1983/GPUMD/tree/master/potentials/eam

Python version (create_eam.py) by Germain Clavier germain.clavier at gmail.com

Most parameters based on this paper:

X. W. Zhou, R. A. Johnson, and H. N. G. Wadley, Phys. Rev. B, 69,
144113 (2004).

Parameters for Cr were taken from:
m = 20, n = 20
Lin Z B, Johnson R A and Zhigilei L V, Phys. Rev. B 77 214108 (2008).
X. Yang et al., 2021.: https://www.researchgate.net/publication/348923109 (In this paper, confirmation is given for AlCoCrFe High Entropy Alloy.)

Or (Only three main parameters are different: beta(ntypes)=beta1(ntypes), A(ntypes), B(ntypes))
For EAM_Cr_Anand-2016_code
G. Anand et al., Scripta Materialia, 124, 90-94 (2016).

Parameters for Nb were taken from:
m = 20, n = 20
De-Ye Lin et al., J. Phys.: Condens. Matter 25 (2013) 105404

Parameters for Hf were taken from:
Maybe, m = 20, n = 20
K. Sasikumar et al., Chem. Mater. 2019, 31, 9, 3089-3102

Parameters for V were taken from:
m = 20, n = 20
S. Zhao et al., Acta Materialia, 219, 117233 (2021)
In this paper, confirmation is given for BCC VTaTi and VTaW.

Parameters for Zn were taken from:
Maybe, m = 20, n = 20
A. Clement et al., Modelling Simul. Mater. Sci. Eng. 31 (2023) 015004
For Zn
re = a/sqrt(2) = 3.935/sqrt(2) = 2.78 [Angstrom](FCC case)
fe = Cohesive energy [eV/atom] / (Lattice parameter^3/4)^(1/3) [Angstrom/atom] = 0.43834 [eV/Angstrom]
rhos = rhoe = 6.84 [eV/Angstrom]
For Cu (Calculation for checking)
re = a/sqrt(2) = 3.635/sqrt(2) = 2.57 [Angstrom](FCC case)
fe = Cohesive energy [eV/atom] / (Lattice parameter^3/4)^(1/3) [Angstrom/atom] = 1.62206 [eV/Angstrom]
rhos = rhoe = 21.42 [eV/Angstrom]

This tool can be used to create an DYNAMO-formatted EAM
setfl file for alloy systems, using any combination
of the elements discussed in the paper and listed in
the EAM_code file, namely:

Cu, Ag, Au, Ni, Pd, Pt, Al, Pb, Fe, Mo, Ta, W, Mg, Co, Ti, Zr, Cr, Nb, Hf, V

WARNING: Please note that the parameter sets used here are all optimized
for the pure metals of the individual elements and that mixing rules will
be applied for creating the inter-element interactions.  Those are inferior
to models where the mixed terms were specifically optimized for particular
alloys.  Thus any potential files created with this tool should be used
with care and test calculations (e.g. on multiple binary mixtures) performed
to gauge the error.

Steps (create.f):

1) compile create.f -> a.out  (e.g. gfortran create.f)
2) edit the input file EAM.input to list 2 or more desired elements to include
3) a.out < EAM.input will create an *.eam.alloy potential file

Steps (create_eam.py):

Usage: create_eam.py [-h] [-n NAME [NAME ...]] [-nr NR] [-nrho NRHO]

options:
  -n NAME [NAME ...], --names NAME [NAME ...]
                        Element names
  -nr NR                Number of point in r space [default 2000]
  -nrho NRHO            Number of point in rho space [default 2000]

1) you must have numpy installed
2) run "python create_eam.py -n Ta Cu" with the list of desired elements
3) this will create an *.eam.alloy potential file

in DYNAMO or LAMMPS context the created file is referred to as a setfl file
  that can be used with the LAMMPS pair_style eam/alloy command

Parameters of 18 elements: https://github.com/brucefan1983/GPUMD/tree/master/potentials/eam
------------------------------------------------------------------------------
EAM_code
Note: () indicates arguments for Zhou04_create_v2.f in the Fortran code.
Ref: A. Clement et al., Modelling Simul. Mater. Sci. Eng. 31 (2023) 015004.: https://iopscience.iop.org/article/10.1088/1361-651X/aca4ec

Line  1 : element : W
Line  2 : re      : 2.74084 (about the distance to the first neighbour fcc shell)
Line  3 : fe      : 3.48734 (about the element's cohesive energy / characteristic atomic distance = Ec/(V^(1/3)), V is the atomic volume of the pure element) (the fe means the coefficient for mixing phi between A and B atoms.)
Line  4 : rhoe    : 37.234847 (the equilibrium electronic density [eV/A] evaluated from DFT)) (in near equilibrium area)
Line  5 : rhos    : 37.234847 (almost same value as rhoe) (In some literature, it is the same value as rhoe.)(in repulsive core area)
Line  6 : alpha   : 8.900114 (about 1.875 * beta)
Line  7 : beta    : 4.746728
Line  8 : A       : 0.882435
Line  9 : B       : 1.394592 (The formula used for B and fe is the same. Additional fe is used during mixing.)
Line 10 : chi (cai): 0.139209
Line 11 : lambda (ramda): 0.278417 (about 2 * chi)
Line 12 : Fn0 (Fi0): -4.946281 (=F0+(rhol-1)^2*F2+(rhol-1)^3*F3)) (continuity)
Line 13 : Fn1 (Fi1): -0.148818 (=rhol*(2*(rhol-1)*F2+3*(rhol-1)^2*F3)) (1st derivative continuity)
Line 14 : Fn2 (Fi2): 0.365057 (=rhol^2*(F2+3*(rhol-1)*F3)) (2nd derivative continuity)
Line 15 : Fn3 (Fi3): -4.432406 (=Fn0+Fn2-Fn1) (no interation at infinity)
Line 16 : F0 (Fm0) : -4.96 (=Fe*(1-eta*ln(rhoh))*rhoh^eta - F2*(rhoh-1)^2 - F3*(rhoh-1)^3))(continuity)
Line 17 : F1 (Fm1) : 0.00 (fix value: This comes from the need to keep a symmetric curve in compression or in tension around the equilibrium density, relegating anharmonic effect as a third order correction.)
Line 18 : F2 (Fm2) : 0.661935 (=(1/(2*(rhoh-1)))*(-Fe*eta^2*rhoh^(eta-1)*ln(rhoh)-3*F3*(rhoh-1)^2) (1st derivative continuity)(After correcting the formula, the values ​​were close.)
Line 19 : F3 (Fm3) : 0.348147 (or F3-) (=(1/(3*2*(rhoh-1)))*(-2*F2+Fe*eta^2*(rhoh)^(eta-2)*(ln(rhoh)*(-eta+1)-1)))(2nd derivative continuity)(Even modifying the formula did not work. The constraints can be removed for the reason below (not calculating very high compression).)
Line 20 : eta (fnn): -0.582714
Line 21 : Fe (Fn)  : -4.961306
Line 22 : atomic number (ielement) : 74
Line 23 : atomic mass (amass): 183.84
Line 24 : Fm4     : 0.348147 (or F3+) (almost same value as F3=Fm3)
Line 25 : beta1(=beta) : 4.746728
Line 26 : lambda1(=lambda=ramda) : 0.278417
Line 27 : rhol    : 0.85 (fix value ?) (Note: Anything other than Pt 0.25 will result in 0.85 (when I fitted it, it converged to an optimal solution with a value close to 0.85).)
Line 28 : rhoh    : 1.15 (fix value ?)

Note: In the mixed case, first try changing fe. If that doesn't work, try using Tersoff and similar mixing rules to get a better fit. If that doesn't work, try fitting by adding constraints based on the relationships shown above. In the case of high entropy alloys (HEA), they basically have FCC, BCC, and HCP crystal structures, so it would be sufficient to make them into a shape that suits the crystal. Furthermore, the amount of each element is also small, so it is more likely to be within the applicable range (looking at the paper, there is a relatively good agreement with DFT up to around 20 at.% Zn. Even above that, semi-quantitative evaluation is possible). Furthermore, since the parameters of many pure metals reproduce FCC, BCC, and HCP quite well, it is possible that simply changing the fe value will not result in such bad results.
Note: By increasing the read parameters and rewriting "psi=0.5d0*(f2/f1*psia+f1/f2*psib)", it is possible to flexibly exchange. I hope that this will be officially introduced in v3. Someone could publish it in a paper.

Note: Relationship with the Morse potential and the Tersoff potential
#--------------------------------------------------------------------
Universal Relationships
  Eu(ru) = E(r)/dE, ru = (r-r0)/sart(dE/(d(dE(r)/dr)/dr)) at r=r0
Here, dE is the bond energy, E(r) is the total energy of the system, and r0 is the equilibrium interatomic distance.
First-principles calculations have revealed that when represented in this form, molecules (covalent bonds), interfaces between different metals, chemical adsorption on metal surfaces, and bulk (metallic bonds, etc.) become a single universal curve.
For this reason, Pt-H, etc. have been attempted to be calculated using potentials that take universal curves into account, such as EAM and Tersoff.
#--------------------------------------------------------------------
# chemical pesudopotential method
U(r) = Z*{A*q*exp(-lambda1*r) - B*p*exp(-lambda2*r)}
Here, Z is the coordination number, q is the number of valence electrons, and p is the bond order with neighboring atoms. A and lambda1 are the parameters of the repulsive term, and B and lambda2 are the parameters of the attractive term.
Note: The exponential expression is for analytical convenience, but it is similar to the Morse potential in the analytical solution of the one-electron Schrödinger equation and has a sufficient theoretical basis.
Note: If p is related to Z^(-1/2), the gravitational term becomes Z^(1/2) and the second moment approximation holds.
#--------------------------------------------------------------------
Morse potential: D0*exp(-2*alpha*(r-r0)) - 2.0*D0*exp(-alpha*(r-r0))
Here, r0 is the bond length, and D0 is the bond energy.
Note: This form corresponds to the one-electron Schrödinger equation solved analytically by Morse. [P. M. Morse, Phys. Rev. 34, 57-64 (1929).]
Note: It is possible to reproduce the anharmonicity of the infrared absorption spectrum due to molecular vibrations.
Note: Spring constant of a harmonic oscillator k = sqrt(2.0*D0*alpha)
#--------------------------------------------------------------------
Tersoff potential(tersoff1988): fc*A*exp(-lambda1*r) - fc*bij*B*exp(-lambda2*r)
or
Tersoff potential: fc*[D/(S-1)]*exp(-beta*sqrt(2*S)*(r-r0)) - fc*bij*[S*D/(S-1)]*exp(-beta*sqrt(2/S)*(r-r0)
Note: A mixing rule is used with cutoffs on B, lambda1, lambda2, and distance.
Note: Looking at previous papers, there is almost no mixing of "A" through repulsive forces, but mixing of "B" through attractive forces is taking place.
Note: The expression for bij is the term related to the second moment approximation. The value does not change when it is less than 1/beta, but the effect of the second moment approximation comes into play when it is 1/beta or more.
Note: In the Albe form, m = 1, and in the Tersoff form, m = 3. Tersoff uses m = 3 to smooth out the large change in the weight of the coordination number caused by a small change in r when m = 1.
#--------------------------------------------------------------------
EAM potential (Zhou2004): (1/2)*(sum phi(r_ij) for j) + F(sum rho_ij for j)
phi(r_ij) is a pairwise potential and F(rho_i) is the embedding potential, which depends on the electron density rho_i at site i.
Note: Mixing is done at phi(r_ij). fe means the coefficient of blending between element A and element B. It does not work in the case of the same element.
  Therefore, you can fit the parameters for a pure metal and then determine fe for the alloy. If fe is insufficient, you can increase the parameters and mix them, or expand it to take into account F(rho) and include the effects of coordination number and structure.
  e.g., phi_AB(r) = cA*phi_AA(r) + cB*phi_BB(r)
  Cu-Zn: cA = 0.89502, cB = 0.39372
#--------------------------------------------------------------------
Foiles-Baskes-Daw EAM potential [S. M. Foiles et al., Rhys. Rev. B 33, 7983-7991 (1996).]
Note: rho(r) = n_s * rho_s(r) + n_d * rho_d(r)
  Here, n_s and n_d are the numbers of s and d electrons in the outer shell, and rho_s and rho_d are the density distributions due to s and d orbitals. rho_s and rho_d are calculated using the atomic wave functions analytically obtained by the Hartree-Fock molecular orbital method.
Note: The embedding function F(rho) is determined to reproduce the universal potential proposed by J. H. Rose et al. [J. H. Rose et al., Phys. Rev. B 29 2963-2969 (1984).]
  E(r) = -E_sub*(1+a+d*a^3)*exp(-a), a = (r/a0 -1)/sart(E_sum/(9*B*omega))
  where E_sub is the sublimation energy of the metal, a0 is the lattice constant, B is the bulk modulus, and omega is the volume per atom at equilibrium.
#--------------------------------------------------------------------
Foiles-Baskes-Daw EAM: The pair potential is determined, and then an embedding function is determined to reproduce the universal potential.
MEAM: An embedding function is defined, after which a pair potential is determined to reproduce the universal potential.
#--------------------------------------------------------------------

Note: rhoin(ntypes)=rhol(ntypes)*rhoe(ntypes) in long range part.

Note: The series of Fnx (x=0,1,2,3) vanishes except when rho=rhol, which becomes a constant term. (I'm not sure about differentiation either.)

Note: rho < rho_n = rhol*rhoe (long range part)
Note: rho_n <= rho < rho_o = rhoh*rhoe (near equilibirum) (Compression side)
Note: rho_o <= rho (replusive core)

Note: The first derivative relates to force.
Note: The second derivative is related to the frequency (spring constant).
Note: Phonons are affected by both first and second derivatives, but the second derivative is the most important.
Note: Phonons that follow Bose-Einstein statistics, especially low-frequency (low-energy) phonons, play an important role in thermal conduction.
Note: Low-frequency phonons can efficiently travel long distances within a crystal lattice, so they can effectively transmit heat. This increases the thermal conductivity of the material. In particular, low-frequency phonons become dominant in low-temperature environments and are the main driver of heat conduction.

Note: For F2=(1/(2*(rhoh-1)))*(-Fe*eta^2*rhoh^(eta-1)*ln(rhoh)-3*F3*(rhoh-1)^2) (1st derivative continuity)
The paper erroneously states that F3 is 1.15^2 instead of 0.15^2.

Note: For F3=(1/(3*2*(rhoh-1)))*(-2*F2+Fe*eta^2*(rhoh)^(eta-2)*(ln(rhoh)*(-eta+1)-1)) (2nd derivative continuity)
Perhaps the formula in the paper is wrong. I don't know if the statement in the paper is wrong. If so, removing condition F3 was the right choice. Rather, this means that the fitting results are correct.

[Ref] The constraints on the piecewise embedding function could however not all be simultaneously fullfilled strictly. To cope with this issue, the constraint derived from the continuity of
the second derivative (F3 = ...) of the embedding energy function was removed. For copper and zinc, there is therefore a cusp at ρ = 1.15ρe with a mismatch of the second derivative of 0.145 eV for Cu and 0.125 eV at high density in the
embedding term. The fact that this condition is not satisfied will trigger odd behaviour of the potential only at extremely large compression which is deemed not important in the context of our planned applications of these potentials for plasticity and fracture.

Note: For Zn
The potential fitting procedure was made with a builtin cutoff of 2.5 times the highest lattice parameter (2.5 × 0.3935 nm). To choose this cutoff, we compute every contribution of the neighbouring atoms and no longer take it into account when the contribution is deemed negligible (roughly less than 2 meV atom−1). This corresponds to approximatively five neighbouring shells.
------------------------------------------------------------------------------
# Interatomic potentials: https://libatoms.github.io/matscipy/cli/calculators.html
#   https://journals.aps.org/prb/abstract/10.1103/PhysRevB.93.104201
------------------------------------------------------------------------------
[1] https://zrflanl.wordpress.com/category/eam/

There are two format for EAM potential used in DYNAMO 86

"setfl" format:

Line 1 - 3 : comments
Line 4     : ntypes
Line 5     : nrho     drho     nr   dr   rcutoff
Line 6     : ielem(i)   amass(i)     blat(i)    lat(i)
Line 7     : embedding function
...
Line x     : ielem(j)   amass(j)     blat(j)    lat(j)
Line x+1   : embedding function
...
Line y     : electron density
...
Line p1    : pair potential between type1 and type1
...
Line p2    : pair potential between type2 and type1
...
Line p3    : pair potential between type2 and type 2
...

Note:
ntypes     : number of element types in the potential
nrho       : number of points for the electron density
drho       : increment of electron density
nr         : number of points for the pair potential
dr         : increment of inter-atomic distance
rcutoff    : cut-off distance
ielem(i)   : atomic number for element(i)
amass(i)   : atomic mass for element(i)
blat(i)    : lattice constant for elemnent(i)
lat(i)     : lattice type for element(i)

---------------------------
"funcfl" format:

Line 1     : comments
Line 2     : ielem   amass     blat    lat
Line 3     : nrho   drho   nr   dr    rcutoff
Line 4     : embedding function
...
Line x'   : pair potential
...
Line y'   : electron density
...

Note:
nrho       : number of points for the electron density
drho       : increment of electron density
nr         : number of points for the pair potential
dr         : increment of inter-atomic distance
rcutoff    : cut-off distance
ielem      : atomic number for this element
amass      : atomic mass for this element
blat       : lattice constant for this elemnent
lat        : lattice type for this element

  The pair potential is in the format of rp(r), where, 
r is inter-atomic distance, p(r) is the real pair potential. 
  This format is chosen for computational purpose when using code like DYNAMO. 
