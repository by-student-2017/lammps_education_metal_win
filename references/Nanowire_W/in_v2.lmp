# Example LAMMPS script
#-----------------------------------------------------------------------------------------
# Description of the LAMMPS-program below:
#-----------------------------------------------------------------------------------------
# The sample size is about 100x24x24 Angstrom unit cells, consisting of tungsten atoms with 
# crystal direction [1 0 0] and has a lattice parameter 3.14339 Angstrom.
# The temperature is 700 K. Potential function EAM4. Time step length 5 fs. Boundary conditions pss.
# This simulation first performs a relaxation process consisting of 8000 time steps.
# Thereafter it performs a tensile test where the strain rate is 1 x 10^13 [1/s]. 
# Here there are 8000 time steps. The screen output every 100 time steps will be: 
# step number, current length, volume, temperature, stress in x-direction, strain.
#-----------------------------------------------------------------------------------------
# LAMMPS 64-bit 22Dec2022-MSMPI
clear
#-------------------- Environment Settings -----------------------------------------------
variable  Tdesird equal  700.0 # Desired Temperature [K]
variable  MC_temp equal 1300.0 # Temperature of MC [K]

variable   Nsteps equal   8000 # Number of simulation cycles
variable DumpFreq equal    100 # For print out

variable    dt_ps equal  0.005 # 0.005 [ps] = 5 [fs]

variable  es_rate equal   0.01 # engineering strain rate (1/time units) (strain in x direction)
# Note: (es_rate/1)/dt_ps = 0.01 / (1e-15) = 1.0e13 [1/s]
# L(t) = L(0)*(1 + es_rate*dt*step)
# strain [%] = es_rate*dt*Nstep*100 [%] = 0.01 * 0.005 * 8000 * 100 = 40 [%]

variable Equil_Nsteps equal ${Nsteps} # 40 [ps] on Equilibration (NPT)

variable latconst equal 3.14339 # lattice constants of BCC [Angstrom]
#-------------------- Defining type of atoms, dimensions and boundary conditions ---------
units metal
dimension 3
#boundary p s s # method 1 case
boundary p p p # method 2 case

#-------------------- Atom & Lattice description -----------------------------------------
atom_style atomic

region nanowire block 0 100 0 24 0 24 units box # about 100x24x24 Angstrom
create_box 1 nanowire # set 1 types

# Defining the lattice crating the toms.
lattice bcc ${latconst}

lattice bcc ${latconst} orient x 1 0 0 orient y 0 1 0 orient z 0 0 1
create_atoms 1 region nanowire ratio 1 124546

# Defining the mass and atomic potential
mass * 183.84 # mass of W

#-------------------- Force field --------------------------------------------------------
pair_style eam/fs
pair_coeff * * w_eam4.fs W

#-------------------- relaxation process -------------------------------------------------

timestep ${dt_ps}

# Creating initial velocities.
velocity all create ${Tdesird} 511124 rot yes mom yes

#-------------------- Run the simulation (NPT) -------------------------------------------

# Defining timeintegration, ensemble and temperature
fix 1 all npt temp ${Tdesird} ${Tdesird} $(100*dt) x 0 0 $(1000*dt)

# Defining the number of timesteps.
run ${Equil_Nsteps}

unfix 1

#------------------DEFORMATION------------------------------------------------------------
#reset timer
reset_timestep 0

# Store final cell length for strain calculations
variable tmp equal "lx"
variable  L0 equal ${tmp}
print "Initial Length, L0: ${L0}"

# instrumentation and output
# for units metal, pressure is in 1 [bars] = 100 [kPa] = 0.1 [MPa] = 1x10^-4 [GPa] => p1, p2, p3, are in GPa
# Create a variable called strain, which calculates the strain.
#-------------------------------
variable strain equal "(lx - v_L0)/v_L0"
variable  p0 equal "v_strain"
#-------------------------------
variable  p1 equal "-pxx/10000"
variable  p2 equal "-pyy/10000"
variable  p3 equal "-pzz/10000"
#-------------------------------
variable p12 equal "-pxy/10000"
variable p23 equal "-pyz/10000"
variable p13 equal "-pxz/10000"
#-------------------------------
variable  fm equal "(v_p1+v_p2+v_p3)/3" # Hydrostatic stress
variable  fv equal "sqrt( (1/2)*( (v_p1-v_p2)^2 + (v_p2-v_p3)^2 + (v_p3-v_p1)^2 + 6*(v_p12^2+v_p23^2+v_p13^2) ) )" # Von Mises Stress
variable   t equal "v_fm/v_fv"
variable  fd equal "( (v_p1-v_fm)*(v_p2-v_fm)*(v_p3-v_fm) - ((v_p12)^2)*(v_p3-v_fm) - ((v_p23)^2)*(v_p1-v_fm) - ((v_p13)^2)*(v_p2-v_fm) + 2*(v_p12*v_p23*v_p13) )" # Deviatoric Von Mises stress
#-------------------------------
# principal stresses (dummy)
variable  I1 equal "(v_p1+v_p2+v_p3)"
variable  I2 equal "(v_p1)*(v_p2) + (v_p2)*(v_p3) + (v_p1)*(v_p3) - (v_p12)^2 - (v_p23)^2 - (v_p13)^2"
variable  I3 equal "(v_p1)*(v_p2)*(v_p3) - (v_p1)*((v_p23)^2) - (v_p2)*((v_p13)^2) - (v_p3)*((v_p12)^2) + 2*(v_p12)*(v_p23)*(v_p13)"
variable   A equal "( acos(((2*(v_I1)^3)-9*(v_I1)*(v_I2)+27*(v_I3))/(2*((v_I1)^2-(3*(v_I2)))^(3/2))) )/3" 
variable  s1 equal "( (v_I1)/3)+(2/3)*( sqrt((v_I1)^2-(3*(v_I2)) ) )*cos(v_A)" 
variable  s2 equal "( (v_I1)/3)+(2/3)*( sqrt((v_I1)^2-(3*(v_I2)) ) )*cos((v_A)+(2*PI)/3)"
variable  s3 equal "( (v_I1)/3)+(2/3)*( sqrt((v_I1)^2-(3*(v_I2)) ) )*cos((v_A)+(4*PI)/3)"
#-------------------------------

#thermo
thermo ${DumpFreq}
thermo_style custom step cpuremain v_strain v_p1 v_p2 v_p3 press pe temp 

#Compute the stress for each atom and sum each component for all atoms
compute 1 all stress/atom NULL  # computes the symmetric per-atom stress tensor for each atom in a group.
compute 2 all temp              # computes the temp of a group of atoms
compute 3 all reduce sum c_1[1] # reduces vector quantities of all stress tensors in x-direction and adds all the quantities to a single scalar value
compute kea all ke/atom         # This is related to temperature

variable stress     equal c_3/vol # assigns a value to the variable name stress
variable stress_GPa equal v_stress/10000 # converts the stress calculated to GPa

#---------- output file settings -------------------
fix fo1 all ave/time 1 3 3 c_2 v_strain v_stress v_stress_GPa v_p2 file stress_vs_strain.txt
#---------------------------------------------------
dump            d1 all cfg ${DumpFreq} cfg/run.*.cfg mass type xs ys zs id type vx vy vz fx fy fz c_kea
dump_modify     d1 element W
#---------------------------------------------------

#-------------------- Run the simulation (deformation process) ---------------------------

# method 1 (original paper) (This method is difficult. Not recommended.)
#---------------------------------------------------
# strain rate of 0.01 [1/time units] is applied in x direction
#fix 1 all deform 1 x erate ${es_rate} units box remap x

# Defining timeintegration, ensemble and temperature.
#fix 2 all nvt temp ${Tdesird} ${Tdesird} $(100*dt) # "nvt" and "bouncary p s s" for nano-wire

# Resets the temp of atoms to 700 K by rescaling velocities after every 10 steps
#fix 3 all temp/rescale 10 ${Tdesird} ${Tdesird} 0.05 1.0
#---------------------------------------------------

# method 2 (other paper) (Still a good way in these.)
#---------------------------------------------------
# strain rate of 0.01 [1/time units] is applied in y direction
fix 1 all deform 1 x erate ${es_rate}

# Defining timeintegration, ensemble and temperature.
fix 2 all npt temp ${Tdesird} ${Tdesird} $(v_Nsteps*dt) y 0 0 $(v_Nsteps*dt) z 0 0 $(v_Nsteps*dt) dilate all # Adiabatic conditions
#fix 2 all npt temp ${Tdesird} ${Tdesird} $(100*dt) y 0 0 $(1000*dt) z 0 0 $(1000*dt) dilate all # Non-adiabatic conditions

# Resets the temp of atoms to 700 K by rescaling velocities after every 10 steps
fix 3 all temp/rescale 10 ${Tdesird} ${Tdesird} 0.05 1.0
#---------------------------------------------------

fix writer all print ${DumpFreq} "${p0} ${p2} ${p2} ${p3}" file Fe-Ni.deform.txt screen no

fix def all print 1 "${strain} ${p2} ${s1} ${s2} ${s3} ${fm} ${fv} ${t} ${fd}" file plot_stress_vs_strain_v3.txt screen no

# calculates the radial distribution function (RDF) and output file
compute 11 all rdf 100
fix 5 all ave/time 100 1 100 c_11[*] file data.rdf mode vector

# number of iterations is given so as to give 40% strain to the material
run ${Nsteps} # 40 [ps], MD Simulation (assuming 2 fs time step)

#--------------------------------------------------------------------------------
# The calculation conditions for this time are as follows.
#--------------------------------------------------------------------------------
variable strain_rate_percent equal "(v_strain)/(v_dt_ps * v_Nsteps)*100" # [1/ps]
variable strain_rate equal "(v_strain)/(v_dt_ps * v_Nsteps)" # [%/ps]
print "strain_rate: ${strain_rate_percent} [%/ps] at setting temperature ${Tdesird} [K]"
print "strain rate: ${strain_rate} x 10^12 [1/s] at setting temperature ${Tdesird} [K]"
#--------------------------------------------------------------------------------

print "Simulation is about to finish"
print "All done"
#-------------------- End ----------------------------------------------------------------

#-----------------------------------------------------------------------------------------
# Note
# compute        peratom all stress/atom NULL
# compute        p all reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
# variable       press equal -(c_p[1]+c_p[2]+c_p[3])/(3*vol)
# thermo_style   custom step temp etotal press v_press
# metal unit: press = bar = 0.1 MPa, length = Angstrom = 1e-10 m
#-----------------------------------------------------------------------------------------