### The following input file depicts the tensile sample for Pd50-Pt50 alloy nanowire
#-----------------------------------------------------------------------------------------
# LAMMPS 64-bit 22Dec2022-MSMPI
clear
#-------------------- Environment Settings -----------------------------------------------
variable  Tdesird equal  100.0 # Desired Temperature [K]

variable   Nsteps equal   5000 # Number of simulation cycles
variable DumpFreq equal    100 # For print out

variable    dt_ps equal  0.002 # 0.002 [ps] = 2 [fs]

variable   t_rate equal   0.01 # true strain rate (1/time units), (method 1 case)
variable  es_rate equal    0.1 # engineering strain rate (1/time units), (method 2 or 3 case)
# Note: 0.1 / (2e-15) = 5.0e13 [1/s]
# check: strain rate 0.1/2[fs] = 0.05/1[fs] = 0.05/1e-15[s] = 0.05e15/1[s]
# L(t) = L(0)*(1 + es_rate*dt*step)
# strain [%] = es_rate*dt*Nstep*100 [%] = 0.1 * 0.002 * 5000 * 100 = 100 [%]
#-------------------- Initialization -----------------------------------------------------
echo both
units metal
dimension 3
boundary p p p # method 1 or 2case
#boundary s p s # method 3 case

#-------------------- Atom and Lattice definition (read structure file) ------------------
atom_style atomic

read_data sample_data_tensile.txt # data from step1

#-------------------- Force field --------------------------------------------------------
pair_style eam/alloy
pair_coeff * * PdPt_Zhou04.eam.alloy Pd Pt

#-------------------- Settings -------------------------------------------------------------

timestep ${dt_ps} # 2 [fs]

compute 1 all stress/atom NULL  # computes the symmetric per-atom stress tensor for each atom in a group.
compute 2 all temp              # computes the temp of a group of atoms
compute 3 all reduce sum c_1[2] # reduces vector quantities of all stress tensors in z-direction and adds all the quantities to a single scalar value

# atom radii per type (Pd: atomic radius 1.37 Angstrom, Pt: atomic radius 1.39 Angstrom)
variable r atom "(1.37+1.39)/2"
compute v1 all voronoi/atom radius v_r
compute r0 all reduce sum c_v1[1] # Pd
compute r1 all reduce sum c_v1[2] # Pt
variable         t3 equal (c_r0+c_r1)/2

# assigns a value to the variable name stress
#--------------------------------------
# It takes time to calculate the volume by the Voronoi method every time.
#variable     stress equal c_3/v_t3
#--------------------------------------
# If the volume change error is within the expected range, this method is faster to calculate.
variable stress     equal c_3/vol
#--------------------------------------
variable stress_GPa equal v_stress/1e4 # converts the stress calculated to GPa

variable    tmp equal ly
variable     lo equal ${tmp}
variable strain equal (ly-v_lo)/v_lo

variable     p2 equal -pyy/10000 # [GPa]
# for units metal, pressure is in 1 [bars] = 100 [kPa] = 0.1 [MPa] = 1x10^-4 [GPa] => p1, p2, p3, are in GPa

# Screen output
thermo ${DumpFreq}
thermo_style custom step vol temp pe lx ly lz pzz v_strain v_stress_GPa v_p2 vol v_t3

#---------- output file settings -------------------
fix fo1 all ave/time 1 3 3 c_2 v_strain v_stress v_stress_GPa v_p2 file stress_vs_strain.txt
#---------------------------------------------------
dump            d1 all cfg ${DumpFreq} cfg/run.*.cfg mass type xs ys zs id type vx vy vz fx fy fz
dump_modify     d1 element Pd Pt
#---------------------------------------------------

velocity all create  ${Tdesird} 873847 rot yes mom yes dist gaussian

#-------------------- Run the simulation -------------------------------------------------

# method 1 (original paper) (This method is difficult. Not strongly recommended.)
#---------------------------------------------------
# strain rate of 0.01 [1/time units] is applied in y direction
#fix 1 all deform 1 x volume y trate ${t_rate} z volume units box 

# Defining timeintegration, ensemble and temperature.
#fix 2 all nvt temp ${Tdesird} ${Tdesird} $(100*dt)
#---------------------------------------------------


# method 2 (other paper) (Still a good way in these.)
#---------------------------------------------------
# strain rate of 0.1 [1/time units] is applied in y direction
fix 1 all deform 1 y erate ${es_rate}

# Defining timeintegration, ensemble and temperature.
fix 2 all npt temp ${Tdesird} ${Tdesird} $(v_Nsteps*dt) x 0 0 $(v_Nsteps*dt) z 0 0 $(v_Nsteps*dt) dilate all # Adiabatic conditions
#fix 2 all npt temp ${Tdesird} ${Tdesird} $(100*dt) x 0 0 $(1000*dt) z 0 0 $(1000*dt) dilate all # Non-adiabatic conditions

# Resets the temp of atoms to 700 K by rescaling velocities after every 10 steps
fix 3 all temp/rescale 10 ${Tdesird} ${Tdesird} 0.05 1.0
#---------------------------------------------------

# method 3 (other paper) (This method is difficult. Not recommended.)
#---------------------------------------------------
# strain rate of 0.1 [1/time units] is applied in y direction
#fix 1 all deform 1 y erate ${es_rate} units box # remap y

# Defining timeintegration, ensemble and temperature.
#fix 2 all nvt temp ${Tdesird} ${Tdesird} $(100*dt) # "nvt" and "bouncary s p s" for nano-wire

# Resets the temp of atoms to 700 K by rescaling velocities after every 10 steps
#fix 3 all temp/rescale 10 ${Tdesird} ${Tdesird} 0.05 1.0
#---------------------------------------------------

run ${Nsteps}

#--------------------------------------------------------------------------------
# The calculation conditions for this time are as follows.
#--------------------------------------------------------------------------------
variable strain_rate_percent equal "(v_strain)/(v_dt_ps * v_Nsteps)*100" # [1/ps]
variable strain_rate equal "(v_strain)/(v_dt_ps * v_Nsteps)" # [%/ps]
print "strain_rate: ${strain_rate_percent} [%/ps] at setting temperature ${Tdesird} [K]"
print "strain rate: ${strain_rate} x 10^12 [1/s] at setting temperature ${Tdesird} [K]"
#--------------------------------------------------------------------------------
#
# "vol" is used here because the volume is only about 4 % different from the Voronoi method.
#--------------------------------------------------------------------------------
variable vol_error equal "(v_t3 - vol)/vol*100"
print "volume error: (V(voronoi) - vol)/vol)*100 = ${vol_error} [%]"
#--------------------------------------------------------------------------------

#-------------------- End ----------------------------------------------------------------

#-----------------------------------------------------------------------------------------
# Note
# compute        peratom all stress/atom NULL
# compute        p all reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
# variable       press equal -(c_p[1]+c_p[2]+c_p[3])/(3*vol)
# thermo_style   custom step temp etotal press v_press
# metal unit: press = bar = 0.1 MPa, length = Angstrom = 1e-10 m
#-----------------------------------------------------------------------------------------