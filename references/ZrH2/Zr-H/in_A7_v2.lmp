#8. Crack Interface folder contains calculations for MEAM as discussed in Chapter 8
#Methodology
# Interface (0001) alpha-Zr // {111} delta-ZrH1.5 is created using FORTRAN programming language. 
# The distance at the interface is similar to the distance of zirconium along c directions. 
# Interface is tested for stability and minimized energy. The following script calculates lattice 
# parameters and cohesive energies. The structure is then equilibrated at various temperatures 
# and a constant strain rate is applied on Interface to study crack initiation.
#-----------------------------------------------------------------------------------------
# LAMMPS 64-bit 22Dec2022-MSMPI
clear
#log l.out
#-------------------- Environment Settings -----------------------------------------------
variable       Tdesird equal  800.0 # Desired Temperature [K]

variable  Equil_Nsteps equal  40000 # Number of simulation cycles (NPT)

variable        Nsteps equal  10000 # Number of simulation cycles (strain)

variable      DumpFreq equal   1000 # For print out

variable         dt_ps equal 0.0005 # (Note: Atoms are lost at 0.001 [ps].)

variable  es_rate equal   0.05 # engineering strain rate (1/time units)
# Note: es_rate/dt_ps = 0.05 / (1e-15) = 5.0e13 [1/s]
# L(t) = L(0)*(1 + es_rate*dt*step)
# strain [%] = es_rate*dt*Nstep*100 [%] = 0.05 * 0.0005 * 10000 * 100 = 25 [%]
#-------------------- Initialization -----------------------------------------------------
units metal
dimension 3
boundary p p p

#-------------------- Atom & Lattice description ----------------------------------------
atom_style atomic

# About 80 x 70 x 40 Angstrom
# Interface (0001) alpha-Zr // {111} delta-ZrH2
#-----------------------------------------------------------------------
# (0001) alpha-Zr
#-----------------------------------------------
region new_region block 0 80 0 70 -20 20 units box 
create_box 2 new_region # define 2 types (Zr and H)

region upper block 0 80 0 70 0 20 units box
lattice hcp 3.232 orient x 1 0 0 orient y 0 1 0 orient z 0 0 1
create_atoms 1 region upper 
#-----------------------------------------------

# {111} delta-ZrHx (x = about 1.5)
#-----------------------------------------------
region lower block 0 80 0 70 -20 0 units box 
lattice fcc 4.83 orient x 1 -1 0 orient y 1 1 -2 orient z 1 1 1
create_atoms 1 region lower 

lattice sc 2.415 origin 0.5 0.5 0.5 orient x 1 -1 0 orient y 1 1 -2 orient z 1 1 1
#create_atoms 2 region lower # ZrH2 case
create_atoms 2 random 5112 878567 lower # set H 5112 atoms, randomly. ZrH1.5 case

# creating composition
#set region upper type/fraction 2 0.1 12393 #  H (= type 2) in upper
#set region lower type/fraction 1 0.1 12393 # Zr (= type 1) in lower
#-----------------------------------------------
#-----------------------------------------------------------------------

# Interface (0001) alpha-Zr // {111} delta-ZrH1.5
#read_data ihcpl.in

group       zr type 1 # Zr
group hydrogen type 2 # H

mass 1 91.224  # Zr
mass 2  1.0079 # H

#-------------------- Force field --------------------------------------------------------
pair_style meam
pair_coeff * * library.meam Zr H ZrH.meam Zr H

#-------------------- Settings -----------------------------------------------------------

delete_atoms overlap 0.35 all all

neighbor 2 bin
neigh_modify delay 10 check yes

compute    eng all pe/atom
compute eatoms all reduce sum c_eng

thermo ${DumpFreq}
thermo_style custom step pe lx ly lz press pxx pyy pzz c_eatoms 

#-------------------- Energy Minimization ------------------------------------------------
# 0 [K], structure optimization

fix 1 all nve/limit 0.1
minimize 1.0e-6 1.0e-6 10000 10000
unfix 1

#-------------------- 
fix 1 all box/relax aniso 0.0 vmax 0.1
min_style cg
minimize 1.0e-6 1.0e-6 10000 10000
unfix 1

variable natoms equal "count(all)"
variable   teng equal c_eatoms
variable length equal lx
variable natoms equal atoms
variable   ecoh equal v_teng/v_natoms

print "Total energy (eV) = ${teng};"
print "Number of atoms = ${natoms};"
print "Lattice constant, x (Angstoms) = ${length};"
print "Cohesive energy (eV) = ${ecoh};"

#-------------------- Run the simulation (NPT) -------------------------------------------
#-------------------- EQUILIBRATION ------------------------------------------------------
reset_timestep 0

timestep ${dt_ps}

thermo ${DumpFreq}
thermo_style custom step lx ly lz press pxx pyy pzz pe temp vol ke etotal 

#---------------------------------------------------
dump            d1 all cfg ${DumpFreq} cfg/run.relax.*.cfg mass type xs ys zs id type vx vy vz fx fy fz
dump_modify     d1 element Zr H
#---------------------------------------------------

velocity all create ${Tdesird} 12345 mom yes rot no

fix 1 all npt temp ${Tdesird} ${Tdesird} $(100*dt) aniso 0 0 $(1000*dt) drag 0.5 

run ${Equil_Nsteps}

unfix 1

undump d1

#-------------------- Store final cell length for strain calculations ---------------------
reset_timestep 0

variable tmp equal "lx"
variable  L0 equal ${tmp}
print "Initial Length, L0: ${L0}"

# Output strain and stress info to file
# for units metal, pressure is in [bars] = 100 [kPa] = 1/10000 [GPa]
# p1, p2, p3 are in GPa
variable strain equal "(lx - v_L0)/v_L0"
variable p0 equal "v_strain"
variable p1 equal "-pxx/10000"
variable p2 equal "-pyy/10000"
variable p3 equal "-pzz/10000"

thermo ${DumpFreq}
thermo_style custom step v_strain temp v_p1 v_p2 v_p3 ke pe press vol

compute 1 all stress/atom NULL  # computes the symmetric per-atom stress tensor for each atom in a group.
compute 2 all temp              # computes the temp of a group of atoms
compute 3 all reduce sum c_1[1] # reduces vector quantities of all stress tensors in z-direction and adds all the quantities to a single scalar value
compute kea all ke/atom         # This is related to temperature

variable stress     equal c_3/vol        # assigns a value to the variable name stress
variable stress_GPa equal v_stress/10000 # converts the stress calculated to GPa

#---------- output file settings -------------------
fix fo1 all ave/time 1 3 3 c_2 v_strain v_stress v_stress_GPa v_p1 file stress_vs_strain.txt
#---------------------------------------------------
dump            d2 all cfg ${DumpFreq} cfg/run.strain.*.cfg mass type xs ys zs id type vx vy vz fx fy fz c_kea
dump_modify     d2 element Zr H
#---------------------------------------------------

#-------------------- Run the simulation -------------------------------------------------
fix 1 all deform 1 x erate ${es_rate} units box remap x
fix 2 all npt temp ${Tdesird} ${Tdesird} $(100*dt) y 0 0 $(1000*dt) z 0 0 $(1000*dt) drag 1

run ${Nsteps}

print "All done !"
#-------------------- End ----------------------------------------------------------------