#------------------------------------------------------------------------------------------
# APPENDIX C
# LAMMPS Scripts
# C.1 Crystal Initialization
#------------------------------------------------------------------------------------------
# LAMMPS 64-bit 22Dec2022-MSMPI
#------------------------------------------------------------------------------------------

# Author: Nicholas Karlsen
#
# Command line variables:
# temperature
# nsteps_thermostat_relax - Number of steps to let the crystal initially relax in NVT
# nsteps_npt_eq - Number of steps to equilibriate in NPT
# nsteps_npt_sample - Number of steps to sample box shape in NPT
# nsteps_pos_ave - Number of steps to sample atomic positions in NVT
# nsteps_msd - Number of steps to sample MSD in NVT

# Prepare the system
boundary p p p
units metal
atom_style atomic

read_data init.data

mass 1 15.999400 # O
mass 2 28.085501 # Si

pair_style vashishta
pair_coeff * * SiO.1997.vashishta O Si

group O type 1
group Si type 2

velocity all create ${temperature} ${SEED}
velocity all zero linear
velocity all zero angular

# Keep track of the COM to ensure that its kept constant.
compute COM all com
variable xcm equal c_COM[1]
variable ycm equal c_COM[2]
variable zcm equal c_COM[3]
compute Tcm all temp/com

# ----------------------------------------------------------------------------------- #
# NVT: Relax the thermostat
#
# Begin the simulation in NVT in order to let the thermostat relax and avoid an initial
# rapid expansion of the lattice that would otherwise occur in NPT.
# ----------------------------------------------------------------------------------- #
fix 1 all nve
fix 2 all langevin ${temperature} ${temperature} $(1000*dt) ${SEED} zero yes
fix_modify 2 temp Tcm

thermo_style custom step time pe ke press temp density vol v_xcm v_ycm v_zcm lx ly lz
log log_initbox.lammps
thermo 10
run ${nsteps_thermostat_relax}

# ----------------------------------------------------------------------------------- #
# NPT: Find the equilibrium shape of the simulation box
#
# NOTE: Unfix and refix recenter because it needs to be applied AFTER the fix which
# contains the integrator such that the recentering is done AFTER the timestep
# ----------------------------------------------------------------------------------- #
unfix 1
fix 1 all nph aniso ${pressure} ${pressure} $(1000*dt) fixedpoint ${xcm} ${ycm} ${zcm}
fix_modify 1 temp Tcm

# Let the system equilibrate
run ${nsteps_npt_eq}

# Reset the timestep to avoid funny behaviour with fix ave/time
reset_timestep 0
dump df all custom 10000 dump.lammpstrj id type xs ys zs

# System is now equilibriated; start measuring the box sizes to find the equilibrium shape
# Average the simulation box shape to find the equilibrium shape for the given pressure
variable lx equal lx
variable ly equal ly
variable lz equal lz
fix avelx all ave/time 1 ${nsteps_npt_sample} ${nsteps_npt_sample} v_lx
fix avely all ave/time 1 ${nsteps_npt_sample} ${nsteps_npt_sample} v_ly
fix avelz all ave/time 1 ${nsteps_npt_sample} ${nsteps_npt_sample} v_lz

run ${nsteps_npt_sample}

# Change the size of the box to its equilibrium shape
change_box all x final 0 $(f_avelx) y final 0 $(f_avely) z final 0 $(f_avelz) remap

unfix avelx
unfix avely
unfix avelz

# ----------------------------------------------------------------------------------- #
# NVT: Average the positions of the atoms
# ----------------------------------------------------------------------------------- #
unfix 1
fix 1 all nve
undump df
reset_timestep 0

# Record the average position of each atom
compute xu all property/atom xu
compute yu all property/atom yu
compute zu all property/atom zu

fix avex all ave/atom 1 ${nsteps_pos_ave} ${nsteps_pos_ave} c_xu
fix avey all ave/atom 1 ${nsteps_pos_ave} ${nsteps_pos_ave} c_yu
fix avez all ave/atom 1 ${nsteps_pos_ave} ${nsteps_pos_ave} c_zu
run ${nsteps_pos_ave}

# Set the position of each atom to the average position (equilibrium position)
variable avex atom f_avex
variable avey atom f_avey
variable avez atom f_avez
set atom * x v_avex y v_avey z v_avez

write_data optim_config.data

# ----------------------------------------------------------------------------------- #
# NVT: Sample the mean-squared displacement
#
# Used to compute the spring constant for an ideal Einstein crystal that replicates
# the same MSD, given by: k = 3 k_B T / (2 * <dr^2>)
# ----------------------------------------------------------------------------------- #

compute MSD_O O msd
compute MSD_Si Si msd

thermo_style custom step time c_MSD_O[4] c_MSD_Si[4]
log log_msd.lammps
run ${nsteps_msd}

#------------------------------------------------------------------------------------------