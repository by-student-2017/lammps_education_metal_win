# Example of an input file
#   C.1 SiC (3C) nanowire using MEAM potential

# LAMMPS 64-bit 22Dec2022-MSMPI
#-------------------- Environment Settings -----------------------------------------------
variable  Tdesird equal  298.0 # Desired Temperature [K]

variable   Nsteps equal  40000 # Number of simulation cycles
variable DumpFreq equal    100 # For print out

variable    dt_ps equal  0.001 # 0.001 [ps] = 1 [fs]

variable  es_rate equal   0.01 # engineering strain rate (1/time units)
# Note: 0.01 / (1e-15) = 1.0e13 [1/s]
# check: strain rate 0.01/1[fs] = 0.01/1e-15[s] = 0.01e15/1[s]
# L(t) = L(0)*(1 + es_rate*dt*step)
# strain [%] = es_rate*dt*Nstep*100 [%] = 0.01 * 0.001 * 40000 * 100 = 40 [%]

#-------------------- Zincblende SiC (3C) nanowire ---------------------------------------
units metal
dimension 3
boundary p p p # method 1 or 2 case
#boundary s s p # method 3 case

#-------------------- Atom & Lattice description -----------------------------------------
atom_style atomic

#-------------------- Lattice constants --------------------------------------------------
variable latconst_a equal 4.3596
variable latconst_c equal sqrt(3)*latconst_a
variable c_3C equal sqrt(3)

#-------------------- Change radius of nanowire ------------------------------------------
variable  rad_p equal 4.0
variable  rad_n equal -1*${rad_p}
variable height equal 6*${c_3C}

#-------------------- Geometric constants dependent on radius ----------------------------
variable SiC_yp equal sqrt(3)/2*${rad_p}
variable SiC_yn equal sqrt(3)/2*${rad_n}
variable SiC_xp equal 0.5*${rad_p}
variable SiC_xn equal 0.5*${rad_n}

#-------------------- Create simulation box ----------------------------------------------
lattice fcc ${latconst_a}
region simbox block -5 5 -5 5 -0.01 ${height}
create_box 2 simbox

#-------------------- Defining nanowire --------------------------------------------------
region nprism1 prism 0 ${rad_p} -0.01 ${SiC_yp} -0.01 ${height} ${SiC_xn} 0 0
region nprism2 prism ${rad_n} 0 -0.01 ${SiC_yp} -0.01 ${height} ${SiC_xp} 0 0
region nprism3 prism ${SiC_xn} ${SiC_xp} ${SiC_yn} -0.01 -0.01 ${height} ${SiC_xn} 0 0
region nprism4 prism ${SiC_xn} ${SiC_xp} ${SiC_yn} -0.01 -0.01 ${height} ${SiC_xp} 0 0

region nanowire union 4 nprism1 nprism2 nprism3 nprism4

#-------------------- Creating the zb lattice (normalized z[111]-direction) --------------
lattice custom ${latconst_a} &
  orient x 1 1 -2 orient y -1 1 0 orient z 1 1 1 &
  a1 1.0 0.0 0.0 &
  a2 0.0 1.0 0.0 &
  a3 0.0 0.0 1.0 &
  basis 0.0 0.0 0.0 basis 0.0 0.5 0.5 &
  basis 0.5 0.0 0.5 basis 0.5 0.5 0.0 &
  basis 0.25 0.25 0.25 basis 0.25 0.75 0.75 &
  basis 0.75 0.25 0.75 basis 0.75 0.75 0.25

#-------------------- Adding atoms -------------------------------------------------------
create_atoms 2 region nanowire &
  basis 1 1 basis 2 1 basis 3 1 basis 4 1 &
  basis 5 2 basis 6 2 basis 7 2 basis 7 2

group nanowire region nanowire

#-------------------- Defining Atomic ----------------------------------------------------
mass 1 28.085 # Si
mass 2 12.011 # C

group Si type 1
group  C type 2

#-------------------- Force field --------------------------------------------------------
pair_style meam/c
pair_coeff * * library.meam Si C SiC.meam Si C

#-------------------- Bar stat -----------------------------------------------------------

dump            d1 all cfg ${DumpFreq} cfg/run.relax.*.cfg mass type xs ys zs id type vx vy vz fx fy fz
dump_modify     d1 element Si C

fix RELAXBOX all box/relax iso 0.0

#-------------------- Energy Minimization ----
# 0 [K], structure optimization
min_style sd
minimize 1e-6 1e-6 50000 100000

unfix RELAXBOX
undump d1

#-------------------- LOADING OF NANOWIRE ------------------------------------------------
reset_timestep 0

timestep ${dt_ps}

# Compute stress
compute stress  all stress/atom NULL       # computes the symmetric per-atom stress tensor for each atom in a group.
compute stress3 all reduce sum c_stress[3] # reduces vector quantities of all stress tensors in z-direction and adds all the quantities to a single scalar value
compute       2 all temp                   # computes the temp of a group of atoms
compute     kea all ke/atom                # This is related to temperature
compute  epatom all pe/atom

# atom radii per type (Si-C: 188 pm, radius = 188/2 = 94 pm = 0.94 Angstrom)
variable r atom 0.94
compute v1 all voronoi/atom radius v_r
compute r0 all reduce sum c_v1[1] # Si
compute r1 all reduce sum c_v1[2] # C
variable         t3 equal (c_r0+c_r1)/2
#-----------------------------------------------------
# It takes time to calculate the volume by the Voronoi method every time.
#variable     stress equal c_stress3/v_t3
#-----------------------------------------------------
# If the volume change error is within the expected range, this method is faster to calculate.
variable     stress equal c_stress3/vol
#-----------------------------------------------------
variable stress_GPa equal v_stress/1e4

variable   epot equal pe

variable    tmp equal lz
variable     lo equal ${tmp}
variable strain equal (lz-v_lo)/v_lo

# instrumentation and output
# for units metal, pressure is in 1 [bars] = 100 [kPa] = 0.1 [MPa] = 1x10^-4 [GPa] => p1, p2, p3, are in GPa
# Create a variable called strain, which calculates the strain.
#-------------------------------
variable  p0 equal "v_strain"
#-------------------------------
variable  p1 equal "-pxx/10000"
variable  p2 equal "-pyy/10000"
variable  p3 equal "-pzz/10000"
#-------------------------------
variable p12 equal "-pxy/10000"
variable p23 equal "-pyz/10000"
variable p13 equal "-pxz/10000"
#-------------------------------
variable  fm equal "(v_p1+v_p2+v_p3)/3" # Hydrostatic stress
variable  fv equal "sqrt( (1/2)*( (v_p1-v_p2)^2 + (v_p2-v_p3)^2 + (v_p3-v_p1)^2 + 6*(v_p12^2+v_p23^2+v_p13^2) ) )" # Von Mises Stress
variable   t equal "v_fm/v_fv"
variable  fd equal "( (v_p1-v_fm)*(v_p2-v_fm)*(v_p3-v_fm) - ((v_p12)^2)*(v_p3-v_fm) - ((v_p23)^2)*(v_p1-v_fm) - ((v_p13)^2)*(v_p2-v_fm) + 2*(v_p12*v_p23*v_p13) )" # Deviatoric Von Mises stress
#-------------------------------
# principal stresses (dummy)
variable  I1 equal "(v_p1+v_p2+v_p3)"
variable  I2 equal "(v_p1)*(v_p2) + (v_p2)*(v_p3) + (v_p1)*(v_p3) - (v_p12)^2 - (v_p23)^2 - (v_p13)^2"
variable  I3 equal "(v_p1)*(v_p2)*(v_p3) - (v_p1)*((v_p23)^2) - (v_p2)*((v_p13)^2) - (v_p3)*((v_p12)^2) + 2*(v_p12)*(v_p23)*(v_p13)"
variable   A equal "( acos(((2*(v_I1)^3)-9*(v_I1)*(v_I2)+27*(v_I3))/(2*((v_I1)^2-(3*(v_I2)))^(3/2))) )/3" 
variable  s1 equal "( (v_I1)/3)+(2/3)*( sqrt((v_I1)^2-(3*(v_I2)) ) )*cos(v_A)" 
variable  s2 equal "( (v_I1)/3)+(2/3)*( sqrt((v_I1)^2-(3*(v_I2)) ) )*cos((v_A)+(2*PI)/3)"
variable  s3 equal "( (v_I1)/3)+(2/3)*( sqrt((v_I1)^2-(3*(v_I2)) ) )*cos((v_A)+(4*PI)/3)"
#-------------------------------

# Screen output
thermo ${DumpFreq}
thermo_style custom step vol temp pe lx ly lz pzz v_strain c_stress3 v_stress_GPa vol v_t3

#---------- output file settings -------------------
fix fo1 all ave/time 1 3 3 c_2 v_strain v_stress v_stress_GPa v_p3 file stress_vs_strain.txt
#---------------------------------------------------
#dump 1 all custom 1000 SiC_3C.relax id type x y z c_stress[3] c_epatom
#dump_modify 1 append yes
#---------------------------------------------------
dump            d2 all cfg ${DumpFreq} cfg/run.nvt.*.cfg mass type xs ys zs id type vx vy vz fx fy fz c_kea
dump_modify     d2 element Si C
#---------------------------------------------------
#fix 1 all print 1000 "${stress} ${epot}" file SiC_3C.txt screen no

# Initial velocities
velocity all create ${Tdesird} 511124 rot yes mom yes

#-------------------- MD run (Loading) ---------------------------------------------------

# method 1 (original paper)
#---------------------------------------------------
# Start loading, strain rate of epsilon = 1e14 s^-1
fix LOAD nanowire deform 1 z erate ${es_rate} units box

# Timeintegration
fix NVT all nvt temp ${Tdesird} ${Tdesird} $(100*dt)
#---------------------------------------------------

# method 2 (other paper)
#---------------------------------------------------
# strain rate of 0.01 [1/time units] is applied in y direction
#fix 1 all deform 1 z erate ${es_rate}

# Defining timeintegration, ensemble and temperature. (other case: "nvt" and "bouncary p s s" for nano-wire)
#fix 2 all npt temp ${Tdesird} ${Tdesird} $(v_Nsteps*dt) x 0 0 $(v_Nsteps*dt) y 0 0 $(v_Nsteps*dt) dilate all # Adiabatic conditions
#fix 2 all npt temp ${Tdesird} ${Tdesird} $(100*dt) x 0 0 $(1000*dt) y 0 0 $(1000*dt) dilate all # Non-adiabatic conditions

# Resets the temp of atoms to 298 K by rescaling velocities after every 10 steps
#fix 3 all temp/rescale 10 ${Tdesird} ${Tdesird} 0.05 1.0
#---------------------------------------------------

# method 3 (other paper)
#---------------------------------------------------
# strain rate of 0.01 [1/time units] is applied in z direction
#fix 1 all deform 1 z erate ${es_rate} units box # remap z

# Defining timeintegration, ensemble and temperature.
#fix 2 all nvt temp ${Tdesird} ${Tdesird} $(100*dt) # "nvt" and "bouncary s s p" for nano-wire

# Resets the temp of atoms to 298 K by rescaling velocities after every 10 steps
#fix 3 all temp/rescale 10 ${Tdesird} ${Tdesird} 0.05 1.0
#---------------------------------------------------

fix writer all print ${DumpFreq} "${p0} ${p1} ${p2} ${p3}" file SiC.deform.txt screen no

fix def all print 1 "${strain} ${p3} ${s1} ${s2} ${s3} ${fm} ${fv} ${t} ${fd}" file plot_stress_vs_strain_v3.txt screen no

# calculates the radial distribution function (RDF) and output file
compute 11 all rdf 100
fix 5 all ave/time 100 1 100 c_11[*] file data.rdf mode vector

# number of iterations is given so as to give 40% strain to the material
run ${Nsteps}

#--------------------------------------------------------------------------------
# The calculation conditions for this time are as follows.
#--------------------------------------------------------------------------------
variable strain_rate_percent equal "(v_strain)/(v_dt_ps * v_Nsteps)*100" # [1/ps]
variable strain_rate equal "(v_strain)/(v_dt_ps * v_Nsteps)" # [%/ps]
print "strain_rate: ${strain_rate_percent} [%/ps] at setting temperature ${Tdesird} [K]"
print "strain rate: ${strain_rate} x 10^12 [1/s] at setting temperature ${Tdesird} [K]"
#--------------------------------------------------------------------------------
#
# "vol" is used here because the volume is only about -1.16% different from the Voronoi method.
#--------------------------------------------------------------------------------
variable vol_error equal "(v_t3 - vol)/vol*100"
print "volume error: (V(voronoi) - vol)/vol)*100 = ${vol_error} [%]"
#--------------------------------------------------------------------------------

#-------------------- SIMULATION DONE ----------------------------------------------------
print "All done"

#-------------------- End ----------------------------------------------------------------

#-----------------------------------------------------------------------------------------
# Note
# compute        peratom all stress/atom NULL
# compute        p all reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
# variable       press equal -(c_p[1]+c_p[2]+c_p[3])/(3*vol)
# # pxx = -c_p[1]/vol, pyy = -c_p[2]/vol, pzz = -c_p[3]/vol
# thermo_style   custom step temp etotal press v_press
# metal unit: press = bar = 0.1 MPa, length = Angstrom = 1e-10 m
#-----------------------------------------------------------------------------------------